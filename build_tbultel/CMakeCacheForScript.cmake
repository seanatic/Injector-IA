set(AFB_REMPORT "1234")
set(API_NAME "helloworld")
set(BINDINGS_LINK_FLAG "-Wl,--version-script=/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/export.map")
set(BINDIR "bin")
set(BUILD_ENV_SYSROOT "bin")
set(BUILD_TEST_WGT "bin")
set(BUILD_TYPE "RELEASE")
set(Blue "[34m")
set(BoldBlue "[1;34m")
set(BoldCyan "[1;36m")
set(BoldGreen "[1;32m")
set(BoldMagenta "[1;35m")
set(BoldRed "[1;31m")
set(BoldWhite "[1;37m")
set(BoldYellow "[1;33m")
set(CLOSING_MESSAGE "Debug from afb-binder --port=1234  --ldpaths=package --workdir=. --roothttp=../htdocs --verbose ")
set(CMAKE_ADDR2LINE "/usr/bin/addr2line")
set(CMAKE_AR "/usr/bin/ar")
set(CMAKE_AR "/usr/bin/ar")
set(CMAKE_AUTOGEN_ORIGIN_DEPENDS "ON")
set(CMAKE_AUTOMOC_COMPILER_PREDEFINES "ON")
set(CMAKE_AUTOMOC_MACRO_NAMES "Q_OBJECTQ_GADGETQ_NAMESPACE")
set(CMAKE_AUTOMOC_PATH_PREFIX "ON")
set(CMAKE_BASE_NAME "g++")
set(CMAKE_BINARY_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/build_tbultel")
set(CMAKE_BUILD_TOOL "/usr/bin/make")
set(CMAKE_BUILD_TYPE "RELEASE")
set(CMAKE_BUILD_WITH_INSTALL_RPATH "true")
set(CMAKE_C11_COMPILE_FEATURES "c_std_11c_static_assert")
set(CMAKE_C11_EXTENSION_COMPILE_OPTION "-std=gnu11")
set(CMAKE_C11_STANDARD_COMPILE_OPTION "-std=c11")
set(CMAKE_C11_STANDARD__HAS_FULL_SUPPORT "ON")
set(CMAKE_C90_COMPILE_FEATURES "c_std_90c_function_prototypes")
set(CMAKE_C90_EXTENSION_COMPILE_OPTION "-std=gnu90")
set(CMAKE_C90_STANDARD_COMPILE_OPTION "-std=c90")
set(CMAKE_C90_STANDARD__HAS_FULL_SUPPORT "ON")
set(CMAKE_C99_COMPILE_FEATURES "c_std_99c_restrictc_variadic_macros")
set(CMAKE_C99_EXTENSION_COMPILE_OPTION "-std=gnu99")
set(CMAKE_C99_STANDARD_COMPILE_OPTION "-std=c99")
set(CMAKE_C99_STANDARD__HAS_FULL_SUPPORT "ON")
set(CMAKE_CFG_INTDIR ".")
set(CMAKE_COLOR_MAKEFILE "ON")
set(CMAKE_COMMAND "/usr/bin/cmake")
set(CMAKE_COMPILER_IS_GNUCC "1")
set(CMAKE_COMPILER_IS_GNUCXX "1")
set(CMAKE_CPACK_COMMAND "/usr/bin/cpack")
set(CMAKE_CROSSCOMPILING "/usr/bin/cpack")
set(CMAKE_CTEST_COMMAND "/usr/bin/ctest")
set(CMAKE_CURRENT_BINARY_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/build_tbultel")
set(CMAKE_CURRENT_LIST_DIR "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d")
set(CMAKE_CURRENT_LIST_FILE "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/04-extra_targets.cmake")
set(CMAKE_CURRENT_SOURCE_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding")
set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11cxx_alias_templatescxx_alignascxx_alignofcxx_attributescxx_auto_typecxx_constexprcxx_decltypecxx_decltype_incomplete_return_typescxx_default_function_template_argscxx_defaulted_functionscxx_defaulted_move_initializerscxx_delegating_constructorscxx_deleted_functionscxx_enum_forward_declarationscxx_explicit_conversionscxx_extended_friend_declarationscxx_extern_templatescxx_finalcxx_func_identifiercxx_generalized_initializerscxx_inheriting_constructorscxx_inline_namespacescxx_lambdascxx_local_type_template_argscxx_long_long_typecxx_noexceptcxx_nonstatic_member_initcxx_nullptrcxx_overridecxx_range_forcxx_raw_string_literalscxx_reference_qualified_functionscxx_right_angle_bracketscxx_rvalue_referencescxx_sizeof_membercxx_static_assertcxx_strong_enumscxx_thread_localcxx_trailing_return_typescxx_unicode_literalscxx_uniform_initializationcxx_unrestricted_unionscxx_user_literalscxx_variadic_macroscxx_variadic_templates")
set(CMAKE_CXX11_EXTENSION_COMPILE_OPTION "-std=gnu++11")
set(CMAKE_CXX11_STANDARD_COMPILE_OPTION "-std=c++11")
set(CMAKE_CXX11_STANDARD__HAS_FULL_SUPPORT "ON")
set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14cxx_aggregate_default_initializerscxx_attribute_deprecatedcxx_binary_literalscxx_contextual_conversionscxx_decltype_autocxx_digit_separatorscxx_generic_lambdascxx_lambda_init_capturescxx_relaxed_constexprcxx_return_type_deductioncxx_variable_templates")
set(CMAKE_CXX14_EXTENSION_COMPILE_OPTION "-std=gnu++14")
set(CMAKE_CXX14_STANDARD_COMPILE_OPTION "-std=c++14")
set(CMAKE_CXX14_STANDARD__HAS_FULL_SUPPORT "ON")
set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")
set(CMAKE_CXX17_EXTENSION_COMPILE_OPTION "-std=gnu++17")
set(CMAKE_CXX17_STANDARD_COMPILE_OPTION "-std=c++17")
set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")
set(CMAKE_CXX20_EXTENSION_COMPILE_OPTION "-std=gnu++2a")
set(CMAKE_CXX20_STANDARD_COMPILE_OPTION "-std=c++2a")
set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98cxx_template_template_parameters")
set(CMAKE_CXX98_EXTENSION_COMPILE_OPTION "-std=gnu++98")
set(CMAKE_CXX98_STANDARD_COMPILE_OPTION "-std=c++98")
set(CMAKE_CXX98_STANDARD__HAS_FULL_SUPPORT "ON")
set(CMAKE_CXX_ABI_COMPILED "TRUE")
set(CMAKE_CXX_ARCHIVE_APPEND "<CMAKE_AR> q  <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_CXX_ARCHIVE_APPEND_IPO "\"/usr/bin/gcc-ar-9\" r <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> qc <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_CXX_ARCHIVE_CREATE_IPO "\"/usr/bin/gcc-ar-9\" cr <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_CXX_ARCHIVE_FINISH "<CMAKE_RANLIB> <TARGET>")
set(CMAKE_CXX_ARCHIVE_FINISH_IPO "\"/usr/bin/gcc-ranlib-9\" <TARGET>")
set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "\"/usr/bin/gcc-ranlib-9\" <TARGET>")
set(CMAKE_CXX_COMPILER "/usr/bin/c++")
set(CMAKE_CXX_COMPILER "/usr/bin/c++")
set(CMAKE_CXX_COMPILER_ABI "ELF")
set(CMAKE_CXX_COMPILER_AR "/usr/bin/gcc-ar-9")
set(CMAKE_CXX_COMPILER_AR "/usr/bin/gcc-ar-9")
set(CMAKE_CXX_COMPILER_ARCHITECTURE_ID "/usr/bin/gcc-ar-9")
set(CMAKE_CXX_COMPILER_ARG1 "/usr/bin/gcc-ar-9")
set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")
set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "CXX")
set(CMAKE_CXX_COMPILER_ID "GNU")
set(CMAKE_CXX_COMPILER_ID_PLATFORM_CONTENT "#define STRINGIFY_HELPER(X) #X\n#define STRINGIFY(X) STRINGIFY_HELPER(X)\n\n/* Identify known platforms by name.  */\n#if defined(__linux) || defined(__linux__) || defined(linux)\n# define PLATFORM_ID \"Linux\"\n\n#elif defined(__CYGWIN__)\n# define PLATFORM_ID \"Cygwin\"\n\n#elif defined(__MINGW32__)\n# define PLATFORM_ID \"MinGW\"\n\n#elif defined(__APPLE__)\n# define PLATFORM_ID \"Darwin\"\n\n#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)\n# define PLATFORM_ID \"Windows\"\n\n#elif defined(__FreeBSD__) || defined(__FreeBSD)\n# define PLATFORM_ID \"FreeBSD\"\n\n#elif defined(__NetBSD__) || defined(__NetBSD)\n# define PLATFORM_ID \"NetBSD\"\n\n#elif defined(__OpenBSD__) || defined(__OPENBSD)\n# define PLATFORM_ID \"OpenBSD\"\n\n#elif defined(__sun) || defined(sun)\n# define PLATFORM_ID \"SunOS\"\n\n#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)\n# define PLATFORM_ID \"AIX\"\n\n#elif defined(__hpux) || defined(__hpux__)\n# define PLATFORM_ID \"HP-UX\"\n\n#elif defined(__HAIKU__)\n# define PLATFORM_ID \"Haiku\"\n\n#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)\n# define PLATFORM_ID \"BeOS\"\n\n#elif defined(__QNX__) || defined(__QNXNTO__)\n# define PLATFORM_ID \"QNX\"\n\n#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)\n# define PLATFORM_ID \"Tru64\"\n\n#elif defined(__riscos) || defined(__riscos__)\n# define PLATFORM_ID \"RISCos\"\n\n#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)\n# define PLATFORM_ID \"SINIX\"\n\n#elif defined(__UNIX_SV__)\n# define PLATFORM_ID \"UNIX_SV\"\n\n#elif defined(__bsdos__)\n# define PLATFORM_ID \"BSDOS\"\n\n#elif defined(_MPRAS) || defined(MPRAS)\n# define PLATFORM_ID \"MP-RAS\"\n\n#elif defined(__osf) || defined(__osf__)\n# define PLATFORM_ID \"OSF1\"\n\n#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)\n# define PLATFORM_ID \"SCO_SV\"\n\n#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)\n# define PLATFORM_ID \"ULTRIX\"\n\n#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)\n# define PLATFORM_ID \"Xenix\"\n\n#elif defined(__WATCOMC__)\n# if defined(__LINUX__)\n#  define PLATFORM_ID \"Linux\"\n\n# elif defined(__DOS__)\n#  define PLATFORM_ID \"DOS\"\n\n# elif defined(__OS2__)\n#  define PLATFORM_ID \"OS2\"\n\n# elif defined(__WINDOWS__)\n#  define PLATFORM_ID \"Windows3x\"\n\n# else /* unknown platform */\n#  define PLATFORM_ID\n# endif\n\n#elif defined(__INTEGRITY)\n# if defined(INT_178B)\n#  define PLATFORM_ID \"Integrity178\"\n\n# else /* regular Integrity */\n#  define PLATFORM_ID \"Integrity\"\n# endif\n\n#else /* unknown platform */\n# define PLATFORM_ID\n\n#endif\n\n/* For windows compilers MSVC and Intel we can determine\n   the architecture of the compiler being used.  This is because\n   the compilers do not have flags that can change the architecture,\n   but rather depend on which compiler is being used\n*/\n#if defined(_WIN32) && defined(_MSC_VER)\n# if defined(_M_IA64)\n#  define ARCHITECTURE_ID \"IA64\"\n\n# elif defined(_M_X64) || defined(_M_AMD64)\n#  define ARCHITECTURE_ID \"x64\"\n\n# elif defined(_M_IX86)\n#  define ARCHITECTURE_ID \"X86\"\n\n# elif defined(_M_ARM64)\n#  define ARCHITECTURE_ID \"ARM64\"\n\n# elif defined(_M_ARM)\n#  if _M_ARM == 4\n#   define ARCHITECTURE_ID \"ARMV4I\"\n#  elif _M_ARM == 5\n#   define ARCHITECTURE_ID \"ARMV5I\"\n#  else\n#   define ARCHITECTURE_ID \"ARMV\" STRINGIFY(_M_ARM)\n#  endif\n\n# elif defined(_M_MIPS)\n#  define ARCHITECTURE_ID \"MIPS\"\n\n# elif defined(_M_SH)\n#  define ARCHITECTURE_ID \"SHx\"\n\n# else /* unknown architecture */\n#  define ARCHITECTURE_ID \"\"\n# endif\n\n#elif defined(__WATCOMC__)\n# if defined(_M_I86)\n#  define ARCHITECTURE_ID \"I86\"\n\n# elif defined(_M_IX86)\n#  define ARCHITECTURE_ID \"X86\"\n\n# else /* unknown architecture */\n#  define ARCHITECTURE_ID \"\"\n# endif\n\n#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)\n# if defined(__ICCARM__)\n#  define ARCHITECTURE_ID \"ARM\"\n\n# elif defined(__ICCRX__)\n#  define ARCHITECTURE_ID \"RX\"\n\n# elif defined(__ICCRH850__)\n#  define ARCHITECTURE_ID \"RH850\"\n\n# elif defined(__ICCRL78__)\n#  define ARCHITECTURE_ID \"RL78\"\n\n# elif defined(__ICCRISCV__)\n#  define ARCHITECTURE_ID \"RISCV\"\n\n# elif defined(__ICCAVR__)\n#  define ARCHITECTURE_ID \"AVR\"\n\n# elif defined(__ICC430__)\n#  define ARCHITECTURE_ID \"MSP430\"\n\n# elif defined(__ICCV850__)\n#  define ARCHITECTURE_ID \"V850\"\n\n# elif defined(__ICC8051__)\n#  define ARCHITECTURE_ID \"8051\"\n\n# else /* unknown architecture */\n#  define ARCHITECTURE_ID \"\"\n# endif\n\n#elif defined(__ghs__)\n# if defined(__PPC64__)\n#  define ARCHITECTURE_ID \"PPC64\"\n\n# elif defined(__ppc__)\n#  define ARCHITECTURE_ID \"PPC\"\n\n# elif defined(__ARM__)\n#  define ARCHITECTURE_ID \"ARM\"\n\n# elif defined(__x86_64__)\n#  define ARCHITECTURE_ID \"x64\"\n\n# elif defined(__i386__)\n#  define ARCHITECTURE_ID \"X86\"\n\n# else /* unknown architecture */\n#  define ARCHITECTURE_ID \"\"\n# endif\n#else\n#  define ARCHITECTURE_ID\n#endif\n\n/* Convert integer to decimal digit literals.  */\n#define DEC(n)                   \\\n  ('0' + (((n) / 10000000)%10)), \\\n  ('0' + (((n) / 1000000)%10)),  \\\n  ('0' + (((n) / 100000)%10)),   \\\n  ('0' + (((n) / 10000)%10)),    \\\n  ('0' + (((n) / 1000)%10)),     \\\n  ('0' + (((n) / 100)%10)),      \\\n  ('0' + (((n) / 10)%10)),       \\\n  ('0' +  ((n) % 10))\n\n/* Convert integer to hex digit literals.  */\n#define HEX(n)             \\\n  ('0' + ((n)>>28 & 0xF)), \\\n  ('0' + ((n)>>24 & 0xF)), \\\n  ('0' + ((n)>>20 & 0xF)), \\\n  ('0' + ((n)>>16 & 0xF)), \\\n  ('0' + ((n)>>12 & 0xF)), \\\n  ('0' + ((n)>>8  & 0xF)), \\\n  ('0' + ((n)>>4  & 0xF)), \\\n  ('0' + ((n)     & 0xF))\n\n/* Construct a string literal encoding the version number components. */\n#ifdef COMPILER_VERSION_MAJOR\nchar const info_version[] = {\n  'I', 'N', 'F', 'O', ':',\n  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',\n  COMPILER_VERSION_MAJOR,\n# ifdef COMPILER_VERSION_MINOR\n  '.', COMPILER_VERSION_MINOR,\n#  ifdef COMPILER_VERSION_PATCH\n   '.', COMPILER_VERSION_PATCH,\n#   ifdef COMPILER_VERSION_TWEAK\n    '.', COMPILER_VERSION_TWEAK,\n#   endif\n#  endif\n# endif\n  ']','\\0'}\n#endif\n\n/* Construct a string literal encoding the internal version number. */\n#ifdef COMPILER_VERSION_INTERNAL\nchar const info_version_internal[] = {\n  'I', 'N', 'F', 'O', ':',\n  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',\n  'i','n','t','e','r','n','a','l','[',\n  COMPILER_VERSION_INTERNAL,']','\\0'}\n#endif\n\n/* Construct a string literal encoding the version number components. */\n#ifdef SIMULATE_VERSION_MAJOR\nchar const info_simulate_version[] = {\n  'I', 'N', 'F', 'O', ':',\n  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',\n  SIMULATE_VERSION_MAJOR,\n# ifdef SIMULATE_VERSION_MINOR\n  '.', SIMULATE_VERSION_MINOR,\n#  ifdef SIMULATE_VERSION_PATCH\n   '.', SIMULATE_VERSION_PATCH,\n#   ifdef SIMULATE_VERSION_TWEAK\n    '.', SIMULATE_VERSION_TWEAK,\n#   endif\n#  endif\n# endif\n  ']','\\0'}\n#endif\n\n/* Construct the string literal in pieces to prevent the source from\n   getting matched.  Store it in a pointer rather than an array\n   because some compilers will just produce instructions to fill the\n   array rather than assigning a pointer to a static array.  */\nchar const* info_platform = \"INFO\" \":\" \"platform[\" PLATFORM_ID \"]\"\nchar const* info_arch = \"INFO\" \":\" \"arch[\" ARCHITECTURE_ID \"]\"\n\n")
set(CMAKE_CXX_COMPILER_ID_RUN "1")
set(CMAKE_CXX_COMPILER_ID_TEST_FLAGS "-c--c++--ec++--target=arm-arm-none-eabi -mcpu=cortex-m3")
set(CMAKE_CXX_COMPILER_ID_TOOL_MATCH_INDEX "2")
set(CMAKE_CXX_COMPILER_ID_TOOL_MATCH_REGEX "\nLd[^\n]*(\n[ 	]+[^\n]*)*\n[ 	]+([^ 	\n\n]+)[^\n\n]*-o[^\n\n]*CompilerIdCXX/(\\./)?(CompilerIdCXX.(framework|xctest)/)?CompilerIdCXX[ 	\n\\\"]")
set(CMAKE_CXX_COMPILER_ID_VENDORS "IAR")
set(CMAKE_CXX_COMPILER_ID_VENDOR_REGEX_IAR "IAR .+ Compiler")
set(CMAKE_CXX_COMPILER_INIT "IAR .+ Compiler")
set(CMAKE_CXX_COMPILER_LIST "c++CCg++aCCclbccxlCclang++")
set(CMAKE_CXX_COMPILER_LOADED "1")
set(CMAKE_CXX_COMPILER_NAMES "c++")
set(CMAKE_CXX_COMPILER_PREDEFINES_COMMAND "/usr/bin/c++-dM-E-c/usr/share/cmake-3.16/Modules/CMakeCXXCompilerABI.cpp")
set(CMAKE_CXX_COMPILER_PRODUCED_FILES "a.out")
set(CMAKE_CXX_COMPILER_PRODUCED_OUTPUT "a.out")
set(CMAKE_CXX_COMPILER_RANLIB "/usr/bin/gcc-ranlib-9")
set(CMAKE_CXX_COMPILER_RANLIB "/usr/bin/gcc-ranlib-9")
set(CMAKE_CXX_COMPILER_VERSION "9.3.0")
set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "9.3.0")
set(CMAKE_CXX_COMPILER_WORKS "TRUE")
set(CMAKE_CXX_COMPILER_WRAPPER "TRUE")
set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98cxx_template_template_parameterscxx_std_11cxx_alias_templatescxx_alignascxx_alignofcxx_attributescxx_auto_typecxx_constexprcxx_decltypecxx_decltype_incomplete_return_typescxx_default_function_template_argscxx_defaulted_functionscxx_defaulted_move_initializerscxx_delegating_constructorscxx_deleted_functionscxx_enum_forward_declarationscxx_explicit_conversionscxx_extended_friend_declarationscxx_extern_templatescxx_finalcxx_func_identifiercxx_generalized_initializerscxx_inheriting_constructorscxx_inline_namespacescxx_lambdascxx_local_type_template_argscxx_long_long_typecxx_noexceptcxx_nonstatic_member_initcxx_nullptrcxx_overridecxx_range_forcxx_raw_string_literalscxx_reference_qualified_functionscxx_right_angle_bracketscxx_rvalue_referencescxx_sizeof_membercxx_static_assertcxx_strong_enumscxx_thread_localcxx_trailing_return_typescxx_unicode_literalscxx_uniform_initializationcxx_unrestricted_unionscxx_user_literalscxx_variadic_macroscxx_variadic_templatescxx_std_14cxx_aggregate_default_initializerscxx_attribute_deprecatedcxx_binary_literalscxx_contextual_conversionscxx_decltype_autocxx_digit_separatorscxx_generic_lambdascxx_lambda_init_capturescxx_relaxed_constexprcxx_return_type_deductioncxx_variable_templatescxx_std_17cxx_std_20")
set(CMAKE_CXX_COMPILE_OBJECT "<CMAKE_CXX_COMPILER>  <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT> -c <SOURCE>")
set(CMAKE_CXX_COMPILE_OPTIONS_CREATE_PCH "-Winvalid-pch-xc++-header-include<PCH_HEADER>")
set(CMAKE_CXX_COMPILE_OPTIONS_IPO "-flto-fno-fat-lto-objects")
set(CMAKE_CXX_COMPILE_OPTIONS_PIC "-fPIC")
set(CMAKE_CXX_COMPILE_OPTIONS_PIE "-fPIE")
set(CMAKE_CXX_COMPILE_OPTIONS_SYSROOT "--sysroot=")
set(CMAKE_CXX_COMPILE_OPTIONS_USE_PCH "-Winvalid-pch-include<PCH_HEADER>")
set(CMAKE_CXX_COMPILE_OPTIONS_VISIBILITY "-fvisibility=")
set(CMAKE_CXX_COMPILE_OPTIONS_VISIBILITY_INLINES_HIDDEN "-fvisibility-inlines-hidden")
set(CMAKE_CXX_CREATE_ASSEMBLY_SOURCE "<CMAKE_CXX_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -S <SOURCE> -o <ASSEMBLY_SOURCE>")
set(CMAKE_CXX_CREATE_PREPROCESSED_SOURCE "<CMAKE_CXX_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -E <SOURCE> > <PREPROCESSED_SOURCE>")
set(CMAKE_CXX_CREATE_SHARED_LIBRARY "<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_CXX_CREATE_SHARED_MODULE "<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_CXX_FLAGS "<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_CXX_FLAGS_DEBUG_INIT " -g")
set(CMAKE_CXX_FLAGS_INIT "  ")
set(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -DNDEBUG")
set(CMAKE_CXX_FLAGS_MINSIZEREL_INIT " -Os -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE_INIT " -O3 -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT " -O2 -g -DNDEBUG")
set(CMAKE_CXX_IGNORE_EXTENSIONS "inlhhppHPPHoOobjOBJdefDEFrcRC")
set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "/usr/include/c++/9/usr/include/x86_64-linux-gnu/c++/9/usr/include/c++/9/backward/usr/lib/gcc/x86_64-linux-gnu/9/include/usr/local/include/usr/include/x86_64-linux-gnu/usr/include")
set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "/usr/lib/gcc/x86_64-linux-gnu/9/usr/lib/x86_64-linux-gnu/usr/lib/lib/x86_64-linux-gnu/lib")
set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "/usr/lib/gcc/x86_64-linux-gnu/9/usr/lib/x86_64-linux-gnu/usr/lib/lib/x86_64-linux-gnu/lib")
set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++mgcc_sgcccgcc_sgcc")
set(CMAKE_CXX_INFORMATION_LOADED "1")
set(CMAKE_CXX_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")
set(CMAKE_CXX_LINKER_PREFERENCE "30")
set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES "1")
set(CMAKE_CXX_LINKER_WRAPPER_FLAG "-Wl,")
set(CMAKE_CXX_LINKER_WRAPPER_FLAG_SEP ",")
set(CMAKE_CXX_LINK_EXECUTABLE "<CMAKE_CXX_COMPILER>  <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS>  -o <TARGET> <LINK_LIBRARIES>")
set(CMAKE_CXX_LINK_OPTIONS_NO_PIE "-no-pie")
set(CMAKE_CXX_LINK_OPTIONS_PIE "-fPIE-pie")
set(CMAKE_CXX_OUTPUT_EXTENSION ".o")
set(CMAKE_CXX_PLATFORM_ID "Linux")
set(CMAKE_CXX_SIMULATE_ID "Linux")
set(CMAKE_CXX_SIMULATE_VERSION "Linux")
set(CMAKE_CXX_SIZEOF_DATA_PTR "8")
set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS "CMc++cccppcxxmmCPP")
set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "14")
set(CMAKE_CXX_STANDARD_DEFAULT "14")
set(CMAKE_CXX_VERBOSE_FLAG "-v")
set(CMAKE_CXX_XCODE_ARCHS "-v")
set(CMAKE_C_ABI_COMPILED "TRUE")
set(CMAKE_C_ARCHIVE_APPEND "<CMAKE_AR> q  <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_C_ARCHIVE_APPEND_IPO "\"/usr/bin/gcc-ar-9\" r <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> qc <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_C_ARCHIVE_CREATE_IPO "\"/usr/bin/gcc-ar-9\" cr <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_C_ARCHIVE_FINISH "<CMAKE_RANLIB> <TARGET>")
set(CMAKE_C_ARCHIVE_FINISH_IPO "\"/usr/bin/gcc-ranlib-9\" <TARGET>")
set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "\"/usr/bin/gcc-ranlib-9\" <TARGET>")
set(CMAKE_C_COMPILER "/usr/bin/cc")
set(CMAKE_C_COMPILER "/usr/bin/cc")
set(CMAKE_C_COMPILER_ABI "ELF")
set(CMAKE_C_COMPILER_AR "/usr/bin/gcc-ar-9")
set(CMAKE_C_COMPILER_AR "/usr/bin/gcc-ar-9")
set(CMAKE_C_COMPILER_ARCHITECTURE_ID "/usr/bin/gcc-ar-9")
set(CMAKE_C_COMPILER_ARG1 "/usr/bin/gcc-ar-9")
set(CMAKE_C_COMPILER_ENV_VAR "CC")
set(CMAKE_C_COMPILER_FRONTEND_VARIANT "CC")
set(CMAKE_C_COMPILER_ID "GNU")
set(CMAKE_C_COMPILER_ID_PLATFORM_CONTENT "#define STRINGIFY_HELPER(X) #X\n#define STRINGIFY(X) STRINGIFY_HELPER(X)\n\n/* Identify known platforms by name.  */\n#if defined(__linux) || defined(__linux__) || defined(linux)\n# define PLATFORM_ID \"Linux\"\n\n#elif defined(__CYGWIN__)\n# define PLATFORM_ID \"Cygwin\"\n\n#elif defined(__MINGW32__)\n# define PLATFORM_ID \"MinGW\"\n\n#elif defined(__APPLE__)\n# define PLATFORM_ID \"Darwin\"\n\n#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)\n# define PLATFORM_ID \"Windows\"\n\n#elif defined(__FreeBSD__) || defined(__FreeBSD)\n# define PLATFORM_ID \"FreeBSD\"\n\n#elif defined(__NetBSD__) || defined(__NetBSD)\n# define PLATFORM_ID \"NetBSD\"\n\n#elif defined(__OpenBSD__) || defined(__OPENBSD)\n# define PLATFORM_ID \"OpenBSD\"\n\n#elif defined(__sun) || defined(sun)\n# define PLATFORM_ID \"SunOS\"\n\n#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)\n# define PLATFORM_ID \"AIX\"\n\n#elif defined(__hpux) || defined(__hpux__)\n# define PLATFORM_ID \"HP-UX\"\n\n#elif defined(__HAIKU__)\n# define PLATFORM_ID \"Haiku\"\n\n#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)\n# define PLATFORM_ID \"BeOS\"\n\n#elif defined(__QNX__) || defined(__QNXNTO__)\n# define PLATFORM_ID \"QNX\"\n\n#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)\n# define PLATFORM_ID \"Tru64\"\n\n#elif defined(__riscos) || defined(__riscos__)\n# define PLATFORM_ID \"RISCos\"\n\n#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)\n# define PLATFORM_ID \"SINIX\"\n\n#elif defined(__UNIX_SV__)\n# define PLATFORM_ID \"UNIX_SV\"\n\n#elif defined(__bsdos__)\n# define PLATFORM_ID \"BSDOS\"\n\n#elif defined(_MPRAS) || defined(MPRAS)\n# define PLATFORM_ID \"MP-RAS\"\n\n#elif defined(__osf) || defined(__osf__)\n# define PLATFORM_ID \"OSF1\"\n\n#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)\n# define PLATFORM_ID \"SCO_SV\"\n\n#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)\n# define PLATFORM_ID \"ULTRIX\"\n\n#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)\n# define PLATFORM_ID \"Xenix\"\n\n#elif defined(__WATCOMC__)\n# if defined(__LINUX__)\n#  define PLATFORM_ID \"Linux\"\n\n# elif defined(__DOS__)\n#  define PLATFORM_ID \"DOS\"\n\n# elif defined(__OS2__)\n#  define PLATFORM_ID \"OS2\"\n\n# elif defined(__WINDOWS__)\n#  define PLATFORM_ID \"Windows3x\"\n\n# else /* unknown platform */\n#  define PLATFORM_ID\n# endif\n\n#elif defined(__INTEGRITY)\n# if defined(INT_178B)\n#  define PLATFORM_ID \"Integrity178\"\n\n# else /* regular Integrity */\n#  define PLATFORM_ID \"Integrity\"\n# endif\n\n#else /* unknown platform */\n# define PLATFORM_ID\n\n#endif\n\n/* For windows compilers MSVC and Intel we can determine\n   the architecture of the compiler being used.  This is because\n   the compilers do not have flags that can change the architecture,\n   but rather depend on which compiler is being used\n*/\n#if defined(_WIN32) && defined(_MSC_VER)\n# if defined(_M_IA64)\n#  define ARCHITECTURE_ID \"IA64\"\n\n# elif defined(_M_X64) || defined(_M_AMD64)\n#  define ARCHITECTURE_ID \"x64\"\n\n# elif defined(_M_IX86)\n#  define ARCHITECTURE_ID \"X86\"\n\n# elif defined(_M_ARM64)\n#  define ARCHITECTURE_ID \"ARM64\"\n\n# elif defined(_M_ARM)\n#  if _M_ARM == 4\n#   define ARCHITECTURE_ID \"ARMV4I\"\n#  elif _M_ARM == 5\n#   define ARCHITECTURE_ID \"ARMV5I\"\n#  else\n#   define ARCHITECTURE_ID \"ARMV\" STRINGIFY(_M_ARM)\n#  endif\n\n# elif defined(_M_MIPS)\n#  define ARCHITECTURE_ID \"MIPS\"\n\n# elif defined(_M_SH)\n#  define ARCHITECTURE_ID \"SHx\"\n\n# else /* unknown architecture */\n#  define ARCHITECTURE_ID \"\"\n# endif\n\n#elif defined(__WATCOMC__)\n# if defined(_M_I86)\n#  define ARCHITECTURE_ID \"I86\"\n\n# elif defined(_M_IX86)\n#  define ARCHITECTURE_ID \"X86\"\n\n# else /* unknown architecture */\n#  define ARCHITECTURE_ID \"\"\n# endif\n\n#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)\n# if defined(__ICCARM__)\n#  define ARCHITECTURE_ID \"ARM\"\n\n# elif defined(__ICCRX__)\n#  define ARCHITECTURE_ID \"RX\"\n\n# elif defined(__ICCRH850__)\n#  define ARCHITECTURE_ID \"RH850\"\n\n# elif defined(__ICCRL78__)\n#  define ARCHITECTURE_ID \"RL78\"\n\n# elif defined(__ICCRISCV__)\n#  define ARCHITECTURE_ID \"RISCV\"\n\n# elif defined(__ICCAVR__)\n#  define ARCHITECTURE_ID \"AVR\"\n\n# elif defined(__ICC430__)\n#  define ARCHITECTURE_ID \"MSP430\"\n\n# elif defined(__ICCV850__)\n#  define ARCHITECTURE_ID \"V850\"\n\n# elif defined(__ICC8051__)\n#  define ARCHITECTURE_ID \"8051\"\n\n# else /* unknown architecture */\n#  define ARCHITECTURE_ID \"\"\n# endif\n\n#elif defined(__ghs__)\n# if defined(__PPC64__)\n#  define ARCHITECTURE_ID \"PPC64\"\n\n# elif defined(__ppc__)\n#  define ARCHITECTURE_ID \"PPC\"\n\n# elif defined(__ARM__)\n#  define ARCHITECTURE_ID \"ARM\"\n\n# elif defined(__x86_64__)\n#  define ARCHITECTURE_ID \"x64\"\n\n# elif defined(__i386__)\n#  define ARCHITECTURE_ID \"X86\"\n\n# else /* unknown architecture */\n#  define ARCHITECTURE_ID \"\"\n# endif\n#else\n#  define ARCHITECTURE_ID\n#endif\n\n/* Convert integer to decimal digit literals.  */\n#define DEC(n)                   \\\n  ('0' + (((n) / 10000000)%10)), \\\n  ('0' + (((n) / 1000000)%10)),  \\\n  ('0' + (((n) / 100000)%10)),   \\\n  ('0' + (((n) / 10000)%10)),    \\\n  ('0' + (((n) / 1000)%10)),     \\\n  ('0' + (((n) / 100)%10)),      \\\n  ('0' + (((n) / 10)%10)),       \\\n  ('0' +  ((n) % 10))\n\n/* Convert integer to hex digit literals.  */\n#define HEX(n)             \\\n  ('0' + ((n)>>28 & 0xF)), \\\n  ('0' + ((n)>>24 & 0xF)), \\\n  ('0' + ((n)>>20 & 0xF)), \\\n  ('0' + ((n)>>16 & 0xF)), \\\n  ('0' + ((n)>>12 & 0xF)), \\\n  ('0' + ((n)>>8  & 0xF)), \\\n  ('0' + ((n)>>4  & 0xF)), \\\n  ('0' + ((n)     & 0xF))\n\n/* Construct a string literal encoding the version number components. */\n#ifdef COMPILER_VERSION_MAJOR\nchar const info_version[] = {\n  'I', 'N', 'F', 'O', ':',\n  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',\n  COMPILER_VERSION_MAJOR,\n# ifdef COMPILER_VERSION_MINOR\n  '.', COMPILER_VERSION_MINOR,\n#  ifdef COMPILER_VERSION_PATCH\n   '.', COMPILER_VERSION_PATCH,\n#   ifdef COMPILER_VERSION_TWEAK\n    '.', COMPILER_VERSION_TWEAK,\n#   endif\n#  endif\n# endif\n  ']','\\0'}\n#endif\n\n/* Construct a string literal encoding the internal version number. */\n#ifdef COMPILER_VERSION_INTERNAL\nchar const info_version_internal[] = {\n  'I', 'N', 'F', 'O', ':',\n  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',\n  'i','n','t','e','r','n','a','l','[',\n  COMPILER_VERSION_INTERNAL,']','\\0'}\n#endif\n\n/* Construct a string literal encoding the version number components. */\n#ifdef SIMULATE_VERSION_MAJOR\nchar const info_simulate_version[] = {\n  'I', 'N', 'F', 'O', ':',\n  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',\n  SIMULATE_VERSION_MAJOR,\n# ifdef SIMULATE_VERSION_MINOR\n  '.', SIMULATE_VERSION_MINOR,\n#  ifdef SIMULATE_VERSION_PATCH\n   '.', SIMULATE_VERSION_PATCH,\n#   ifdef SIMULATE_VERSION_TWEAK\n    '.', SIMULATE_VERSION_TWEAK,\n#   endif\n#  endif\n# endif\n  ']','\\0'}\n#endif\n\n/* Construct the string literal in pieces to prevent the source from\n   getting matched.  Store it in a pointer rather than an array\n   because some compilers will just produce instructions to fill the\n   array rather than assigning a pointer to a static array.  */\nchar const* info_platform = \"INFO\" \":\" \"platform[\" PLATFORM_ID \"]\"\nchar const* info_arch = \"INFO\" \":\" \"arch[\" ARCHITECTURE_ID \"]\"\n\n")
set(CMAKE_C_COMPILER_ID_RUN "1")
set(CMAKE_C_COMPILER_ID_TEST_FLAGS "-c-Aa-D__CLASSIC_C__--target=arm-arm-none-eabi -mcpu=cortex-m3")
set(CMAKE_C_COMPILER_ID_TOOL_MATCH_INDEX "2")
set(CMAKE_C_COMPILER_ID_TOOL_MATCH_REGEX "\nLd[^\n]*(\n[ 	]+[^\n]*)*\n[ 	]+([^ 	\n\n]+)[^\n\n]*-o[^\n\n]*CompilerIdC/(\\./)?(CompilerIdC.(framework|xctest)/)?CompilerIdC[ 	\n\\\"]")
set(CMAKE_C_COMPILER_ID_VENDORS "IAR")
set(CMAKE_C_COMPILER_ID_VENDOR_REGEX_IAR "IAR .+ Compiler")
set(CMAKE_C_COMPILER_INIT "IAR .+ Compiler")
set(CMAKE_C_COMPILER_LIST "ccgccclbccxlcclang")
set(CMAKE_C_COMPILER_LOADED "1")
set(CMAKE_C_COMPILER_NAMES "cc")
set(CMAKE_C_COMPILER_PREDEFINES_COMMAND "/usr/bin/cc-dM-E-c/usr/share/cmake-3.16/Modules/CMakeCXXCompilerABI.cpp")
set(CMAKE_C_COMPILER_PRODUCED_FILES "a.out")
set(CMAKE_C_COMPILER_PRODUCED_OUTPUT "a.out")
set(CMAKE_C_COMPILER_RANLIB "/usr/bin/gcc-ranlib-9")
set(CMAKE_C_COMPILER_RANLIB "/usr/bin/gcc-ranlib-9")
set(CMAKE_C_COMPILER_VERSION "9.3.0")
set(CMAKE_C_COMPILER_VERSION_INTERNAL "9.3.0")
set(CMAKE_C_COMPILER_WORKS "TRUE")
set(CMAKE_C_COMPILER_WRAPPER "TRUE")
set(CMAKE_C_COMPILE_FEATURES "c_std_90c_function_prototypesc_std_99c_restrictc_variadic_macrosc_std_11c_static_assert")
set(CMAKE_C_COMPILE_OBJECT "<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT>   -c <SOURCE>")
set(CMAKE_C_COMPILE_OPTIONS_CREATE_PCH "-Winvalid-pch-xc-header-include<PCH_HEADER>")
set(CMAKE_C_COMPILE_OPTIONS_IPO "-flto-fno-fat-lto-objects")
set(CMAKE_C_COMPILE_OPTIONS_PIC "-fPIC")
set(CMAKE_C_COMPILE_OPTIONS_PIE "-fPIE")
set(CMAKE_C_COMPILE_OPTIONS_SYSROOT "--sysroot=")
set(CMAKE_C_COMPILE_OPTIONS_USE_PCH "-Winvalid-pch-include<PCH_HEADER>")
set(CMAKE_C_COMPILE_OPTIONS_VISIBILITY "-fvisibility=")
set(CMAKE_C_CREATE_ASSEMBLY_SOURCE "<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -S <SOURCE> -o <ASSEMBLY_SOURCE>")
set(CMAKE_C_CREATE_PREPROCESSED_SOURCE "<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -E <SOURCE> > <PREPROCESSED_SOURCE>")
set(CMAKE_C_CREATE_SHARED_LIBRARY "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_C_CREATE_SHARED_MODULE "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_C_FLAGS "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_C_FLAGS_DEBUG "-g")
set(CMAKE_C_FLAGS_DEBUG_INIT " -g")
set(CMAKE_C_FLAGS_INIT "  ")
set(CMAKE_C_FLAGS_MINSIZEREL "-Os -DNDEBUG")
set(CMAKE_C_FLAGS_MINSIZEREL_INIT " -Os -DNDEBUG")
set(CMAKE_C_FLAGS_RELEASE "-O3 -DNDEBUG")
set(CMAKE_C_FLAGS_RELEASE_INIT " -O3 -DNDEBUG")
set(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g -DNDEBUG")
set(CMAKE_C_FLAGS_RELWITHDEBINFO_INIT " -O2 -g -DNDEBUG")
set(CMAKE_C_IGNORE_EXTENSIONS "hHoOobjOBJdefDEFrcRC")
set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES "/usr/lib/gcc/x86_64-linux-gnu/9/include/usr/local/include/usr/include/x86_64-linux-gnu/usr/include")
set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "/usr/lib/gcc/x86_64-linux-gnu/9/usr/lib/x86_64-linux-gnu/usr/lib/lib/x86_64-linux-gnu/lib")
set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "/usr/lib/gcc/x86_64-linux-gnu/9/usr/lib/x86_64-linux-gnu/usr/lib/lib/x86_64-linux-gnu/lib")
set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gccgcc_scgccgcc_s")
set(CMAKE_C_INFORMATION_LOADED "1")
set(CMAKE_C_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")
set(CMAKE_C_LINKER_PREFERENCE "10")
set(CMAKE_C_LINKER_WRAPPER_FLAG "-Wl,")
set(CMAKE_C_LINKER_WRAPPER_FLAG_SEP ",")
set(CMAKE_C_LINK_EXECUTABLE "<CMAKE_C_COMPILER> <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS>  -o <TARGET> <LINK_LIBRARIES>")
set(CMAKE_C_LINK_OPTIONS_NO_PIE "-no-pie")
set(CMAKE_C_LINK_OPTIONS_PIE "-fPIE-pie")
set(CMAKE_C_OUTPUT_EXTENSION ".o")
set(CMAKE_C_PLATFORM_ID "Linux")
set(CMAKE_C_SIMULATE_ID "Linux")
set(CMAKE_C_SIMULATE_VERSION "Linux")
set(CMAKE_C_SIZEOF_DATA_PTR "8")
set(CMAKE_C_SOURCE_FILE_EXTENSIONS "cm")
set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "11")
set(CMAKE_C_STANDARD_DEFAULT "11")
set(CMAKE_C_VERBOSE_FLAG "-v")
set(CMAKE_C_XCODE_ARCHS "-v")
set(CMAKE_DEPFILE_FLAGS_C "-MD -MT <OBJECT> -MF <DEPFILE>")
set(CMAKE_DEPFILE_FLAGS_CXX "-MD -MT <OBJECT> -MF <DEPFILE>")
set(CMAKE_DLLTOOL "-MD -MT <OBJECT> -MF <DEPFILE>")
set(CMAKE_DL_LIBS "dl")
set(CMAKE_EFFECTIVE_SYSTEM_NAME "Linux")
set(CMAKE_EXECUTABLE_FORMAT "ELF")
set(CMAKE_EXECUTABLE_RPATH_LINK_CXX_FLAG "-Wl,-rpath-link,")
set(CMAKE_EXECUTABLE_RPATH_LINK_C_FLAG "-Wl,-rpath-link,")
set(CMAKE_EXECUTABLE_RUNTIME_CXX_FLAG "-Wl,-rpath,")
set(CMAKE_EXECUTABLE_RUNTIME_CXX_FLAG_SEP ":")
set(CMAKE_EXECUTABLE_RUNTIME_C_FLAG "-Wl,-rpath,")
set(CMAKE_EXECUTABLE_RUNTIME_C_FLAG_SEP ":")
set(CMAKE_EXECUTABLE_SUFFIX ":")
set(CMAKE_EXE_EXPORTS_CXX_FLAG "-Wl,--export-dynamic")
set(CMAKE_EXE_EXPORTS_C_FLAG "-Wl,--export-dynamic")
set(CMAKE_EXE_LINKER_FLAGS "-Wl,--export-dynamic")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "-Wl,--export-dynamic")
set(CMAKE_EXE_LINKER_FLAGS_INIT "  ")
set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "  ")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "  ")
set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "  ")
set(CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS "-Wl,-Bdynamic")
set(CMAKE_EXE_LINK_DYNAMIC_C_FLAGS "-Wl,-Bdynamic")
set(CMAKE_EXE_LINK_STATIC_CXX_FLAGS "-Wl,-Bstatic")
set(CMAKE_EXE_LINK_STATIC_C_FLAGS "-Wl,-Bstatic")
set(CMAKE_EXPORT_COMPILE_COMMANDS "-Wl,-Bstatic")
set(CMAKE_EXTRA_GENERATOR "-Wl,-Bstatic")
set(CMAKE_FILES_DIRECTORY "/CMakeFiles")
set(CMAKE_FIND_LIBRARY_PREFIXES "lib")
set(CMAKE_FIND_LIBRARY_SUFFIXES ".so.a")
set(CMAKE_GENERATOR "Unix Makefiles")
set(CMAKE_GENERATOR_INSTANCE "Unix Makefiles")
set(CMAKE_GENERATOR_PLATFORM "Unix Makefiles")
set(CMAKE_GENERATOR_TOOLSET "Unix Makefiles")
set(CMAKE_HOME_DIRECTORY "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding")
set(CMAKE_HOST_SYSTEM "Linux-5.11.0-27-generic")
set(CMAKE_HOST_SYSTEM_NAME "Linux")
set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")
set(CMAKE_HOST_SYSTEM_VERSION "5.11.0-27-generic")
set(CMAKE_HOST_UNIX "1")
set(CMAKE_INCLUDE_FLAG_C "-I")
set(CMAKE_INCLUDE_FLAG_CXX "-I")
set(CMAKE_INCLUDE_SYSTEM_FLAG_C "-isystem ")
set(CMAKE_INCLUDE_SYSTEM_FLAG_CXX "-isystem ")
set(CMAKE_INSTALL_BINDIR "bin")
set(CMAKE_INSTALL_DATADIR "share")
set(CMAKE_INSTALL_DATADIR "share")
set(CMAKE_INSTALL_DATAROOTDIR "share")
set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME "Unspecified")
set(CMAKE_INSTALL_DOCDIR "share/doc/helloworld-binding")
set(CMAKE_INSTALL_DOCDIR "share/doc/helloworld-binding")
set(CMAKE_INSTALL_FULL_BINDIR "/usr/local/bin")
set(CMAKE_INSTALL_FULL_DATADIR "/usr/local/share")
set(CMAKE_INSTALL_FULL_DATAROOTDIR "/usr/local/share")
set(CMAKE_INSTALL_FULL_DOCDIR "/usr/local/share/doc/helloworld-binding")
set(CMAKE_INSTALL_FULL_INCLUDEDIR "/usr/local/include")
set(CMAKE_INSTALL_FULL_INFODIR "/usr/local/share/info")
set(CMAKE_INSTALL_FULL_LIBDIR "/usr/local/lib")
set(CMAKE_INSTALL_FULL_LIBEXECDIR "/usr/local/libexec")
set(CMAKE_INSTALL_FULL_LOCALEDIR "/usr/local/share/locale")
set(CMAKE_INSTALL_FULL_LOCALSTATEDIR "/usr/local/var")
set(CMAKE_INSTALL_FULL_MANDIR "/usr/local/share/man")
set(CMAKE_INSTALL_FULL_OLDINCLUDEDIR "/usr/include")
set(CMAKE_INSTALL_FULL_RUNSTATEDIR "/usr/local/var/run")
set(CMAKE_INSTALL_FULL_SBINDIR "/usr/local/sbin")
set(CMAKE_INSTALL_FULL_SHAREDSTATEDIR "/usr/local/com")
set(CMAKE_INSTALL_FULL_SYSCONFDIR "/usr/local/etc")
set(CMAKE_INSTALL_INCLUDEDIR "include")
set(CMAKE_INSTALL_INFODIR "share/info")
set(CMAKE_INSTALL_INFODIR "share/info")
set(CMAKE_INSTALL_LIBDIR "lib")
set(CMAKE_INSTALL_LIBEXECDIR "libexec")
set(CMAKE_INSTALL_LOCALEDIR "share/locale")
set(CMAKE_INSTALL_LOCALEDIR "share/locale")
set(CMAKE_INSTALL_LOCALSTATEDIR "var")
set(CMAKE_INSTALL_MANDIR "share/man")
set(CMAKE_INSTALL_MANDIR "share/man")
set(CMAKE_INSTALL_OLDINCLUDEDIR "/usr/include")
set(CMAKE_INSTALL_PREFIX "/usr/local")
set(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT "1")
set(CMAKE_INSTALL_RUNSTATEDIR "var/run")
set(CMAKE_INSTALL_RUNSTATEDIR "var/run")
set(CMAKE_INSTALL_SBINDIR "sbin")
set(CMAKE_INSTALL_SHAREDSTATEDIR "com")
set(CMAKE_INSTALL_SO_NO_EXE "1")
set(CMAKE_INSTALL_SYSCONFDIR "etc")
set(CMAKE_INTERNAL_PLATFORM_ABI "ELF")
set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")
set(CMAKE_LIBRARY_ARCHITECTURE_REGEX "[a-z0-9_]+(-[a-z0-9_]+)?-linux-gnu[a-z0-9_]*")
set(CMAKE_LIBRARY_PATH_FLAG "-L")
set(CMAKE_LIBRARY_PATH_TERMINATOR "-L")
set(CMAKE_LINKER "/usr/bin/ld")
set(CMAKE_LINKER "/usr/bin/ld")
set(CMAKE_LINK_LIBRARY_FLAG "-l")
set(CMAKE_LINK_LIBRARY_SUFFIX "-l")
set(CMAKE_MAJOR_VERSION "3")
set(CMAKE_MAKE_PROGRAM "/usr/bin/make")
set(CMAKE_MATCH_0 "debian")
set(CMAKE_MATCH_1 "debian")
set(CMAKE_MATCH_COUNT "debian")
set(CMAKE_MINIMUM_REQUIRED_VERSION "3.6")
set(CMAKE_MINOR_VERSION "16")
set(CMAKE_MODULE_LINKER_FLAGS "16")
set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "16")
set(CMAKE_MODULE_LINKER_FLAGS_INIT "  ")
set(CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL "  ")
set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "  ")
set(CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO "  ")
set(CMAKE_MT "  ")
set(CMAKE_NM "/usr/bin/nm")
set(CMAKE_OBJCOPY "/usr/bin/objcopy")
set(CMAKE_OBJDUMP "/usr/bin/objdump")
set(CMAKE_PARENT_LIST_FILE "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/common.cmake")
set(CMAKE_PATCH_VERSION "3")
set(CMAKE_PCH_EXTENSION ".gch")
set(CMAKE_PCH_PROLOGUE "#pragma GCC system_header")
set(CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "/lib/lib32/lib64/usr/lib/usr/lib32/usr/lib64")
set(CMAKE_PLATFORM_INFO_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/build_tbultel/CMakeFiles/3.16.3")
set(CMAKE_PLATFORM_INFO_INITIALIZED "1")
set(CMAKE_PLATFORM_USES_PATH_WHEN_NO_SONAME "1")
set(CMAKE_POSITION_INDEPENDENT_CODE "ON")
set(CMAKE_PREFIX_PATH "/usr/local/lib64/pkgconfig/usr/local/lib/pkgconfig")
set(CMAKE_PROJECT_DESCRIPTION "Provide an Helloworld Binding")
set(CMAKE_PROJECT_HOMEPAGE_URL "https://github.com/redpesk-samples/helloworld-binding")
set(CMAKE_PROJECT_NAME "helloworld-binding")
set(CMAKE_PROJECT_VERSION "1.0")
set(CMAKE_PROJECT_VERSION_MAJOR "1")
set(CMAKE_PROJECT_VERSION_MINOR "1")
set(CMAKE_PROJECT_VERSION_PATCH "1")
set(CMAKE_PROJECT_VERSION_TWEAK "1")
set(CMAKE_RANLIB "/usr/bin/ranlib")
set(CMAKE_RANLIB "/usr/bin/ranlib")
set(CMAKE_READELF "/usr/bin/readelf")
set(CMAKE_ROOT "/usr/share/cmake-3.16")
set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "-shared")
set(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "-shared")
set(CMAKE_SHARED_LIBRARY_CXX_FLAGS "-fPIC")
set(CMAKE_SHARED_LIBRARY_C_FLAGS "-fPIC")
set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "-rdynamic")
set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "-rdynamic")
set(CMAKE_SHARED_LIBRARY_LINK_DYNAMIC_CXX_FLAGS "-Wl,-Bdynamic")
set(CMAKE_SHARED_LIBRARY_LINK_DYNAMIC_C_FLAGS "-Wl,-Bdynamic")
set(CMAKE_SHARED_LIBRARY_LINK_STATIC_CXX_FLAGS "-Wl,-Bstatic")
set(CMAKE_SHARED_LIBRARY_LINK_STATIC_C_FLAGS "-Wl,-Bstatic")
set(CMAKE_SHARED_LIBRARY_PREFIX "lib")
set(CMAKE_SHARED_LIBRARY_RPATH_LINK_CXX_FLAG "-Wl,-rpath-link,")
set(CMAKE_SHARED_LIBRARY_RPATH_LINK_C_FLAG "-Wl,-rpath-link,")
set(CMAKE_SHARED_LIBRARY_RPATH_ORIGIN_TOKEN "$ORIGIN")
set(CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG "-Wl,-rpath,")
set(CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG_SEP ":")
set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG "-Wl,-rpath,")
set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG_SEP ":")
set(CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG "-Wl,-soname,")
set(CMAKE_SHARED_LIBRARY_SONAME_C_FLAG "-Wl,-soname,")
set(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
set(CMAKE_SHARED_LINKER_FLAGS ".so")
set(CMAKE_SHARED_LINKER_FLAGS_DEBUG ".so")
set(CMAKE_SHARED_LINKER_FLAGS_INIT "  ")
set(CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL "  ")
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "  ")
set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "  ")
set(CMAKE_SHARED_MODULE_CREATE_CXX_FLAGS "-shared")
set(CMAKE_SHARED_MODULE_CREATE_C_FLAGS "-shared")
set(CMAKE_SHARED_MODULE_CXX_FLAGS "-fPIC")
set(CMAKE_SHARED_MODULE_C_FLAGS "-fPIC")
set(CMAKE_SHARED_MODULE_LINK_DYNAMIC_CXX_FLAGS "-Wl,-Bdynamic")
set(CMAKE_SHARED_MODULE_LINK_DYNAMIC_C_FLAGS "-Wl,-Bdynamic")
set(CMAKE_SHARED_MODULE_LINK_STATIC_CXX_FLAGS "-Wl,-Bstatic")
set(CMAKE_SHARED_MODULE_LINK_STATIC_C_FLAGS "-Wl,-Bstatic")
set(CMAKE_SHARED_MODULE_PREFIX "lib")
set(CMAKE_SHARED_MODULE_SUFFIX ".so")
set(CMAKE_SIZEOF_VOID_P "8")
set(CMAKE_SKIP_INSTALL_RPATH "8")
set(CMAKE_SKIP_RPATH "8")
set(CMAKE_SOURCE_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding")
set(CMAKE_STATIC_LIBRARY_PREFIX "lib")
set(CMAKE_STATIC_LIBRARY_SUFFIX ".a")
set(CMAKE_STATIC_LINKER_FLAGS ".a")
set(CMAKE_STATIC_LINKER_FLAGS_DEBUG ".a")
set(CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL ".a")
set(CMAKE_STATIC_LINKER_FLAGS_RELEASE ".a")
set(CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO ".a")
set(CMAKE_STRIP "/usr/bin/strip")
set(CMAKE_SYSTEM "Linux-5.11.0-27-generic")
set(CMAKE_SYSTEM_INCLUDE_PATH "/usr/include/X11")
set(CMAKE_SYSTEM_INFO_FILE "Platform/Linux")
set(CMAKE_SYSTEM_LIBRARY_PATH "/usr/lib/X11")
set(CMAKE_SYSTEM_LOADED "1")
set(CMAKE_SYSTEM_NAME "Linux")
set(CMAKE_SYSTEM_PREFIX_PATH "/usr/local/usr//usr/usr/local/usr/X11R6/usr/pkg/opt")
set(CMAKE_SYSTEM_PROCESSOR "x86_64")
set(CMAKE_SYSTEM_SPECIFIC_INFORMATION_LOADED "1")
set(CMAKE_SYSTEM_SPECIFIC_INITIALIZE_LOADED "1")
set(CMAKE_SYSTEM_VERSION "5.11.0-27-generic")
set(CMAKE_TWEAK_VERSION "5.11.0-27-generic")
set(CMAKE_UNAME "/usr/bin/uname")
set(CMAKE_VERBOSE_MAKEFILE "/usr/bin/uname")
set(CMAKE_VERSION "3.16.3")
set(CMP0048 "1")
set(COMMIT_HASH "67a0dbc")
set(COMPILE_OPTIONS "-Wall-Wextra-Wconversion-Wno-unused-parameter-Wno-sign-compare-Wno-sign-conversion-Werror=implicit-function-declaration-ffunction-sections-fdata-sections-fPIC")
set(COMPILE_OPTIONS_CLANG "-Werror=uninitialized")
set(COMPILE_OPTIONS_GNU "-Werror=maybe-uninitialized")
set(COVERAGE_COMPILE_OPTIONS "-g-O0--coverage")
set(CXX_TEST_WAS_RUN "1")
set(C_TEST_WAS_RUN "1")
set(CacheForScript "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/build_tbultel/CMakeCacheForScript.cmake")
set(ColourBold "[1m")
set(ColourReset "[m")
set(Cyan "[36m")
set(DATADIR "var")
set(DEBUG_COMPILE_OPTIONS "-g-O0-ggdb")
set(DIRTY_FLAG " M autobuild/agl/autobuild\n?? 210611_dg_nominals.csv\n?? VTExpired.md\n?? discours.md\n?? helloworld-skeleton/helloworld-service-binding.c.ori\n?? helloworld-skeleton/workspace.code-workspace\n?? nominals_en.csv\n?? nominals_mid.csv\n?? nominals_short.csv\n?? test.txt")
set(ETCDIR "etc")
set(Esc "")
set(FIND_PACKAGE_MESSAGE_DETAILS_PkgConfig "[/usr/bin/pkg-config][v0.29.1()]")
set(GDB_INITIAL_BREAK "personality")
set(GIT_PROJECT_VERSION "0.7.0")
set(Green "[32m")
set(HTTPDIR "htdocs")
set(INSTALL_PREFIX "/home/thierry/opt")
set(JSON_CHECKER "/home/thierry/opt")
set(KERNEL_VERSION "5.4.133")
set(LD_LIBRARY_PATH "/usr/local/lib64/usr/local/lib")
set(LIBDIR "lib")
set(LINUX_VERSION_CODE "328837")
set(LINUX_VERSION_CODE_LINE "#define LINUX_VERSION_CODE 328837")
set(LUA_CHECKER "luac-p")
set(MSVC_CXX_ARCHITECTURE_ID "luac-p")
set(MSVC_C_ARCHITECTURE_ID "luac-p")
set(Magenta "[35m")
set(NPKG_PROJECT_NAME "agl-helloworld-binding")
set(OS "agl-helloworld-binding")
set(OSDETECTED "debian")
set(OSRELEASE "debian")
set(OS_RELEASE_PATH "/etc/os-release")
set(PACKAGE_MESSAGE "Install widget file using in the target : afm-util install helloworld-binding.wgt")
set(PACKAGING_DEB_OUTPUT_CHANGELOG "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/conf.d/cmake/packaging/debian.changelog")
set(PACKAGING_DEB_OUTPUT_COMPAT "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/conf.d/cmake/packaging/debian.compat")
set(PACKAGING_DEB_OUTPUT_CONTROL "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/conf.d/cmake/packaging/debian.control")
set(PACKAGING_DEB_OUTPUT_DSC "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/conf.d/cmake/packaging/agl-helloworld-binding.dsc")
set(PACKAGING_DEB_OUTPUT_INSTALL "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/conf.d/cmake/packaging/debian.agl-helloworld-binding.install")
set(PACKAGING_DEB_OUTPUT_RULES "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/conf.d/cmake/packaging/debian.rules")
set(PATTERN "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/conf.d/cmake/cmake/[0-9][0-9]-debian*.cmake/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/conf.d/cmake/cmake.d/[0-9][0-9]-debian*.cmakeconf.d/cmake/cmake/[0-9][0-9]-common*.cmakeconf.d/cmake/cmake.d/[0-9][0-9]-common*.cmake")
set(PKGCONFIG_FOUND "TRUE")
set(PKGOUT_DIR "package")
set(PKG_CONFIG "package")
set(PKG_CONFIG_EXECUTABLE "/usr/bin/pkg-config")
set(PKG_CONFIG_FOUND "TRUE")
set(PKG_CONFIG_USE_CMAKE_PREFIX_PATH "ON")
set(PKG_CONFIG_VERSION "1")
set(PKG_CONFIG_VERSION_STRING "0.29.1")
set(PKG_REQUIRED_LIST "json-cafb-bindingafb-libhelperslibsystemd")
set(PKG_TEMPLATE_PREFIX "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates")
set(PRESET_CMAKE_SYSTEM_NAME "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates")
set(PROFILING_COMPILE_OPTIONS "-g-O0-pg-Wp,-U_FORTIFY_SOURCE")
set(PROJECT_AGL_AUTOBUILD_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/autobuild/agl")
set(PROJECT_APP_TEMPLATES_DIR "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/../..")
set(PROJECT_AUTHOR "Iot-Team")
set(PROJECT_AUTHOR_MAIL "frederic.marec@iot.bzh")
set(PROJECT_BINARY_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/build_tbultel")
set(PROJECT_CMAKE_CONF_DIR "conf.d/cmake")
set(PROJECT_DESCRIPTION "Provide an Helloworld Binding")
set(PROJECT_HOMEPAGE_URL "https://github.com/redpesk-samples/helloworld-binding")
set(PROJECT_ICON "icon.png")
set(PROJECT_LICENSE "APL2.0")
set(PROJECT_LINUX_AUTOBUILD_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/autobuild/linux")
set(PROJECT_NAME "helloworld-binding")
set(PROJECT_PKG_BUILD_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/build_tbultel/package")
set(PROJECT_PKG_ENTRY_POINT "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/conf.d/cmake/packaging")
set(PROJECT_PRETTY_NAME "Helloworld Binding")
set(PROJECT_SOURCE_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding")
set(PROJECT_TEST_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/test")
set(PROJECT_URL "https://github.com/redpesk-samples/helloworld-binding")
set(PROJECT_VERSION "1.0-67a0dbc-dirty")
set(PROJECT_VERSION_MAJOR "1")
set(PROJECT_VERSION_MINOR "1")
set(PROJECT_VERSION_PATCH "1")
set(PROJECT_VERSION_TWEAK "1")
set(PkgConfig_FOUND "TRUE")
set(Project_BINARY_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/build_tbultel")
set(Project_DESCRIPTION "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/build_tbultel")
set(Project_HOMEPAGE_URL "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/build_tbultel")
set(Project_SOURCE_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding")
set(RELEASE_COMPILE_OPTIONS "-O2-D_FORTIFY_SOURCE=2")
set(RSYNC_PREFIX "/tmp")
set(RSYNC_TARGET "root@nuc")
set(RUN_CONFIGURE "ON")
set(Red "[31m")
set(SANITIZERS_COMPILE_OPTIONS "-g-O0-fsanitize=address-fno-omit-frame-pointer")
set(TEMPLATE_DIR "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/../../template.d")
set(TMP_OSRELEASE "ID_LIKE=debian\n")
set(UNIX "1")
set(WIDGET_CONFIG_TEMPLATE "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/conf.d/wgt/config.xml.in")
set(WIDGET_ENTRY_POINT "config.xml")
set(WIDGET_ICON "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/conf.d/cmake/wgt/icon.png")
set(WIDGET_TYPE "application/vnd.agl.service")
set(White "[37m")
set(XML_CHECKER "xmllint")
set(XPREFIX "libsystemd")
set(Yellow "[33m")
set(_CMAKE_CUDA_IMPLICIT_INCLUDE_DIRECTORIES_INIT "/usr/include")
set(_CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT "/usr/include")
set(_CMAKE_CXX_IPO_MAY_BE_SUPPORTED_BY_COMPILER "YES")
set(_CMAKE_CXX_IPO_SUPPORTED_BY_CMAKE "YES")
set(_CMAKE_CXX_PIE_MAY_BE_SUPPORTED_BY_LINKER "YES")
set(_CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES_INIT "/usr/include")
set(_CMAKE_C_IPO_MAY_BE_SUPPORTED_BY_COMPILER "YES")
set(_CMAKE_C_IPO_SUPPORTED_BY_CMAKE "YES")
set(_CMAKE_C_PIE_MAY_BE_SUPPORTED_BY_LINKER "YES")
set(_CMAKE_INSTALL_DIR "/usr")
set(_CMAKE_TOOLCHAIN_LOCATION "/usr/bin")
set(_ExternalProject_SELF "/usr/share/cmake-3.16/Modules/ExternalProject.cmake")
set(_ExternalProject_SELF_DIR "/usr/share/cmake-3.16/Modules")
set(_GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX "/usr/local")
set(_INCLUDED_FILE "/usr/share/cmake-3.16/Modules/Platform/Linux-GNU-CXX.cmake")
set(_INCLUDED_SYSTEM_INFO_FILE "/usr/share/cmake-3.16/Modules/Platform/Linux.cmake")
set(_IN_TC "/usr/share/cmake-3.16/Modules/Platform/Linux.cmake")
set(_LIBDIR_DEFAULT "lib")
set(_SET_CMAKE_CXX_COMPILER_ARCHITECTURE_ID "lib")
set(_SET_CMAKE_C_COMPILER_ARCHITECTURE_ID "lib")
set(__COMPILER_CMAKE_COMMON_COMPILER_MACROS "1")
set(__COMPILER_GNU "1")
set(__LINUX_COMPILER_GNU "1")
set(__UNIX_PATHS_INCLUDED "1")
set(__gcc_hints "/usr/bin")
set(__lto_flags "-flto-fno-fat-lto-objects")
set(__pch_header_C "c-header")
set(__pch_header_CXX "c++-header")
set(__pch_header_OBJC "objective-c-header")
set(__pch_header_OBJCXX "objective-c++-header")
set(__pkg_config_arguments_afb-binding "REQUIREDafb-binding")
set(__pkg_config_arguments_afb-libhelpers "REQUIREDafb-libhelpers")
set(__pkg_config_arguments_json-c "REQUIREDjson-c")
set(__pkg_config_arguments_libsystemd "REQUIREDlibsystemd")
set(__pkg_config_checked_afb-binding "1")
set(__pkg_config_checked_afb-libhelpers "1")
set(__pkg_config_checked_json-c "1")
set(__pkg_config_checked_libsystemd "1")
set(__version_x "9")
set(__version_x_y "9.3")
set(_ep_documentation_line_count "931")
set(_ep_func "ExternalProject_Add_StepDependencies")
set(_ep_hash_algos "MD5|SHA1|SHA224|SHA256|SHA384|SHA512|SHA3_224|SHA3_256|SHA3_384|SHA3_512")
set(_ep_hash_regex "^(MD5|SHA1|SHA224|SHA256|SHA384|SHA512|SHA3_224|SHA3_256|SHA3_384|SHA3_512)=([0-9A-Fa-f]+)$")
set(_ep_key "USES_TERMINAL")
set(_ep_keywords_ExternalProject_Add "^(PREFIX|TMP_DIR|STAMP_DIR|LOG_DIR|DOWNLOAD_DIR|SOURCE_DIR|BINARY_DIR|INSTALL_DIR|DOWNLOAD_COMMAND|URL|URL_HASH|URL_MD5|DOWNLOAD_NAME|DOWNLOAD_NO_EXTRACT|DOWNLOAD_NO_PROGRESS|TIMEOUT|HTTP_USERNAME|HTTP_PASSWORD|HTTP_HEADER|TLS_VERIFY|TLS_CAINFO|NETRC|NETRC_FILE|GIT_REPOSITORY|GIT_TAG|GIT_REMOTE_NAME|GIT_SUBMODULES|GIT_SHALLOW|GIT_PROGRESS|GIT_CONFIG|SVN_REPOSITORY|SVN_REVISION|SVN_USERNAME|SVN_PASSWORD|SVN_TRUST_CERT|HG_REPOSITORY|HG_TAG|CVS_REPOSITORY|CVS_MODULE|CVS_TAG|UPDATE_COMMAND|UPDATE_DISCONNECTED|PATCH_COMMAND|CONFIGURE_COMMAND|CMAKE_COMMAND|CMAKE_GENERATOR|CMAKE_GENERATOR_PLATFORM|CMAKE_GENERATOR_TOOLSET|CMAKE_GENERATOR_INSTANCE|CMAKE_ARGS|CMAKE_CACHE_ARGS|CMAKE_CACHE_DEFAULT_ARGS|SOURCE_SUBDIR|BUILD_COMMAND|BUILD_IN_SOURCE|BUILD_ALWAYS|BUILD_BYPRODUCTS|INSTALL_COMMAND|TEST_COMMAND|TEST_BEFORE_INSTALL|TEST_AFTER_INSTALL|TEST_EXCLUDE_FROM_MAIN|LOG_DOWNLOAD|LOG_UPDATE|LOG_PATCH|LOG_CONFIGURE|LOG_BUILD|LOG_INSTALL|LOG_TEST|LOG_MERGED_STDOUTERR|LOG_OUTPUT_ON_FAILURE|USES_TERMINAL_DOWNLOAD|USES_TERMINAL_UPDATE|USES_TERMINAL_CONFIGURE|USES_TERMINAL_BUILD|USES_TERMINAL_INSTALL|USES_TERMINAL_TEST|DEPENDS|EXCLUDE_FROM_ALL|STEP_TARGETS|INDEPENDENT_STEP_TARGETS|LIST_SEPARATOR)$")
set(_ep_keywords_ExternalProject_Add_Step "^(COMMAND|COMMENT|DEPENDEES|DEPENDERS|DEPENDS|BYPRODUCTS|ALWAYS|EXCLUDE_FROM_MAIN|WORKING_DIRECTORY|LOG|USES_TERMINAL)$")
set(_ep_keywords_ExternalProject_Add_StepDependencies "^()$")
set(_ep_keywords_ExternalProject_Add_StepTargets "^()$")
set(_ep_keywords_ExternalProject_Get_Property "^()$")
set(_imp_target "^()$")
set(_imp_target_global "^()$")
set(_lib_dir "^()$")
set(_no_cmake_environment_path "^()$")
set(_no_cmake_path "^()$")
set(_pkg "^()$")
set(_pkg_check_modules_cnt "1")
set(_pkg_check_modules_exist_query "--print-errors--short-errors--existslibsystemd")
set(_pkg_check_modules_list "libsystemd")
set(_pkg_check_modules_packages "libsystemd")
set(_pkg_check_modules_pkg "libsystemd")
set(_pkg_check_modules_pkg_name "libsystemd")
set(_pkg_check_prefix "libsystemd")
set(_pkg_is_required "1")
set(_pkg_is_silent "1")
set(_pkg_modules "libsystemd")
set(_pkgconfig_LDFLAGS "-lsystemd")
set(_pkgconfig_LIBRARIES "systemd")
set(_pkgconfig_STATIC_LDFLAGS "-lsystemd")
set(_pkgconfig_STATIC_LIBRARIES "systemd")
set(_pkgconfig_VERSION "245")
set(_pkgconfig_error "245")
set(_pkgconfig_failed "245")
set(_pkgconfig_invoke_result "245")
set(_pkgconfig_retval "245")
set(_prefix_dir "245")
set(a "5")
set(afb-binding_CFLAGS "-I/usr/include/afb")
set(afb-binding_CFLAGS_I "-I/usr/include/afb")
set(afb-binding_CFLAGS_OTHER "-I/usr/include/afb")
set(afb-binding_FOUND "1")
set(afb-binding_INCLUDEDIR "1")
set(afb-binding_INCLUDE_DIRS "/usr/include/afb")
set(afb-binding_LDFLAGS "/usr/include/afb")
set(afb-binding_LDFLAGS_OTHER "/usr/include/afb")
set(afb-binding_LIBDIR "/usr/include/afb")
set(afb-binding_LIBRARIES "/usr/include/afb")
set(afb-binding_LIBRARY_DIRS "/usr/include/afb")
set(afb-binding_LIBS "/usr/include/afb")
set(afb-binding_LIBS_L "/usr/include/afb")
set(afb-binding_LIBS_OTHER "/usr/include/afb")
set(afb-binding_LIBS_PATHS "/usr/include/afb")
set(afb-binding_LINK_LIBRARIES "/usr/include/afb")
set(afb-binding_MODULE_NAME "afb-binding")
set(afb-binding_PREFIX "afb-binding")
set(afb-binding_STATIC_CFLAGS "-I/usr/include/afb")
set(afb-binding_STATIC_CFLAGS_I "-I/usr/include/afb")
set(afb-binding_STATIC_CFLAGS_OTHER "-I/usr/include/afb")
set(afb-binding_STATIC_INCLUDE_DIRS "/usr/include/afb")
set(afb-binding_STATIC_LDFLAGS "/usr/include/afb")
set(afb-binding_STATIC_LDFLAGS_OTHER "/usr/include/afb")
set(afb-binding_STATIC_LIBDIR "/usr/include/afb")
set(afb-binding_STATIC_LIBRARIES "/usr/include/afb")
set(afb-binding_STATIC_LIBRARY_DIRS "/usr/include/afb")
set(afb-binding_STATIC_LIBS "/usr/include/afb")
set(afb-binding_STATIC_LIBS_L "/usr/include/afb")
set(afb-binding_STATIC_LIBS_OTHER "/usr/include/afb")
set(afb-binding_STATIC_LIBS_PATHS "/usr/include/afb")
set(afb-binding_VERSION "4.0.2")
set(afb-binding_afb-binding_INCLUDEDIR "4.0.2")
set(afb-binding_afb-binding_LIBDIR "4.0.2")
set(afb-binding_afb-binding_PREFIX "4.0.2")
set(afb-binding_afb-binding_VERSION "4.0.2")
set(afb-libhelpers_CFLAGS "4.0.2")
set(afb-libhelpers_CFLAGS_I "4.0.2")
set(afb-libhelpers_CFLAGS_OTHER "4.0.2")
set(afb-libhelpers_FOUND "1")
set(afb-libhelpers_INCLUDEDIR "/usr/include")
set(afb-libhelpers_INCLUDE_DIRS "/usr/include")
set(afb-libhelpers_LDFLAGS "-lafb-libhelpers")
set(afb-libhelpers_LDFLAGS_OTHER "-lafb-libhelpers")
set(afb-libhelpers_LIBDIR "/usr/lib/x86_64-linux-gnu")
set(afb-libhelpers_LIBRARIES "afb-libhelpers")
set(afb-libhelpers_LIBRARY_DIRS "afb-libhelpers")
set(afb-libhelpers_LIBS "afb-libhelpers")
set(afb-libhelpers_LIBS_L "afb-libhelpers")
set(afb-libhelpers_LIBS_OTHER "afb-libhelpers")
set(afb-libhelpers_LIBS_PATHS "afb-libhelpers")
set(afb-libhelpers_LINK_LIBRARIES "/usr/lib/x86_64-linux-gnu/libafb-libhelpers.a")
set(afb-libhelpers_MODULE_NAME "afb-libhelpers")
set(afb-libhelpers_PREFIX "/usr")
set(afb-libhelpers_STATIC_CFLAGS "/usr")
set(afb-libhelpers_STATIC_CFLAGS_I "/usr")
set(afb-libhelpers_STATIC_CFLAGS_OTHER "/usr")
set(afb-libhelpers_STATIC_INCLUDE_DIRS "/usr")
set(afb-libhelpers_STATIC_LDFLAGS "-lafb-libhelpers")
set(afb-libhelpers_STATIC_LDFLAGS_OTHER "-lafb-libhelpers")
set(afb-libhelpers_STATIC_LIBDIR "-lafb-libhelpers")
set(afb-libhelpers_STATIC_LIBRARIES "afb-libhelpers")
set(afb-libhelpers_STATIC_LIBRARY_DIRS "afb-libhelpers")
set(afb-libhelpers_STATIC_LIBS "afb-libhelpers")
set(afb-libhelpers_STATIC_LIBS_L "afb-libhelpers")
set(afb-libhelpers_STATIC_LIBS_OTHER "afb-libhelpers")
set(afb-libhelpers_STATIC_LIBS_PATHS "afb-libhelpers")
set(afb-libhelpers_VERSION "10.0.0")
set(afb-libhelpers_afb-libhelpers_INCLUDEDIR "10.0.0")
set(afb-libhelpers_afb-libhelpers_LIBDIR "10.0.0")
set(afb-libhelpers_afb-libhelpers_PREFIX "10.0.0")
set(afb-libhelpers_afb-libhelpers_VERSION "10.0.0")
set(b "4")
set(c "133")
set(dir "133")
set(distro_cmakefiles "133")
set(extension "133")
set(f "133")
set(file "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/04-extra_targets.cmake")
set(gcc_minimal_version "4.9")
set(helloworld-binding_BINARY_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding/build_tbultel")
set(helloworld-binding_DESCRIPTION "Provide an Helloworld Binding")
set(helloworld-binding_HOMEPAGE_URL "https://github.com/redpesk-samples/helloworld-binding")
set(helloworld-binding_SOURCE_DIR "/home/thierry/Seanatic/ubs-cloud/workspace/helloworld-binding")
set(helloworld-binding_VERSION "1.0")
set(helloworld-binding_VERSION_MAJOR "1")
set(helloworld-binding_VERSION_MINOR "1")
set(helloworld-binding_VERSION_PATCH "1")
set(helloworld-binding_VERSION_TWEAK "1")
set(home_cmakefiles "/home/thierry/.config/app-templates/cmake.d/10-common-rsync.cmake")
set(json-c_CFLAGS "-I/usr/include/json-c")
set(json-c_CFLAGS_I "-I/usr/include/json-c")
set(json-c_CFLAGS_OTHER "-I/usr/include/json-c")
set(json-c_FOUND "1")
set(json-c_INCLUDEDIR "/usr/include")
set(json-c_INCLUDE_DIRS "/usr/include/json-c")
set(json-c_LDFLAGS "-ljson-c")
set(json-c_LDFLAGS_OTHER "-ljson-c")
set(json-c_LIBDIR "/usr/lib/x86_64-linux-gnu")
set(json-c_LIBRARIES "json-c")
set(json-c_LIBRARY_DIRS "json-c")
set(json-c_LIBS "json-c")
set(json-c_LIBS_L "json-c")
set(json-c_LIBS_OTHER "json-c")
set(json-c_LIBS_PATHS "json-c")
set(json-c_LINK_LIBRARIES "/usr/lib/x86_64-linux-gnu/libjson-c.so")
set(json-c_MODULE_NAME "json-c")
set(json-c_PREFIX "/usr")
set(json-c_STATIC_CFLAGS "-I/usr/include/json-c")
set(json-c_STATIC_CFLAGS_I "-I/usr/include/json-c")
set(json-c_STATIC_CFLAGS_OTHER "-I/usr/include/json-c")
set(json-c_STATIC_INCLUDE_DIRS "/usr/include/json-c")
set(json-c_STATIC_LDFLAGS "-ljson-c")
set(json-c_STATIC_LDFLAGS_OTHER "-ljson-c")
set(json-c_STATIC_LIBDIR "-ljson-c")
set(json-c_STATIC_LIBRARIES "json-c")
set(json-c_STATIC_LIBRARY_DIRS "json-c")
set(json-c_STATIC_LIBS "json-c")
set(json-c_STATIC_LIBS_L "json-c")
set(json-c_STATIC_LIBS_OTHER "json-c")
set(json-c_STATIC_LIBS_PATHS "json-c")
set(json-c_VERSION "0.13.1")
set(json-c_json-c_INCLUDEDIR "0.13.1")
set(json-c_json-c_LIBDIR "0.13.1")
set(json-c_json-c_PREFIX "0.13.1")
set(json-c_json-c_VERSION "0.13.1")
set(l "0.13.1")
set(lang "0.13.1")
set(libsystemd_CFLAGS "0.13.1")
set(libsystemd_CFLAGS_I "0.13.1")
set(libsystemd_CFLAGS_OTHER "0.13.1")
set(libsystemd_FOUND "1")
set(libsystemd_INCLUDEDIR "/usr/include")
set(libsystemd_INCLUDE_DIRS "/usr/include")
set(libsystemd_LDFLAGS "-lsystemd")
set(libsystemd_LDFLAGS_OTHER "-lsystemd")
set(libsystemd_LIBDIR "/lib/x86_64-linux-gnu")
set(libsystemd_LIBRARIES "systemd")
set(libsystemd_LIBRARY_DIRS "systemd")
set(libsystemd_LIBS "systemd")
set(libsystemd_LIBS_L "systemd")
set(libsystemd_LIBS_OTHER "systemd")
set(libsystemd_LIBS_PATHS "systemd")
set(libsystemd_LINK_LIBRARIES "/usr/lib/x86_64-linux-gnu/libsystemd.so")
set(libsystemd_MODULE_NAME "libsystemd")
set(libsystemd_PREFIX "/usr")
set(libsystemd_STATIC_CFLAGS "/usr")
set(libsystemd_STATIC_CFLAGS_I "/usr")
set(libsystemd_STATIC_CFLAGS_OTHER "/usr")
set(libsystemd_STATIC_INCLUDE_DIRS "/usr")
set(libsystemd_STATIC_LDFLAGS "-lsystemd")
set(libsystemd_STATIC_LDFLAGS_OTHER "-lsystemd")
set(libsystemd_STATIC_LIBDIR "-lsystemd")
set(libsystemd_STATIC_LIBRARIES "systemd")
set(libsystemd_STATIC_LIBRARY_DIRS "systemd")
set(libsystemd_STATIC_LIBS "systemd")
set(libsystemd_STATIC_LIBS_L "systemd")
set(libsystemd_STATIC_LIBS_OTHER "systemd")
set(libsystemd_STATIC_LIBS_PATHS "systemd")
set(libsystemd_VERSION "245")
set(libsystemd_libsystemd_INCLUDEDIR "245")
set(libsystemd_libsystemd_LIBDIR "245")
set(libsystemd_libsystemd_PREFIX "245")
set(libsystemd_libsystemd_VERSION "245")
set(line "245")
set(lines ".. command:: ExternalProject_Add    ``PREFIX <dir>``    ``TMP_DIR <dir>``    ``STAMP_DIR <dir>``    ``LOG_DIR <dir>``    ``DOWNLOAD_DIR <dir>``    ``SOURCE_DIR <dir>``    ``BINARY_DIR <dir>``    ``INSTALL_DIR <dir>``    ``DOWNLOAD_COMMAND <cmd>...``      ``URL <url1> [<url2>...]``      ``URL_HASH <algo>=<hashValue>``      ``URL_MD5 <md5>``      ``DOWNLOAD_NAME <fname>``      ``DOWNLOAD_NO_EXTRACT <bool>``      ``DOWNLOAD_NO_PROGRESS <bool>``      ``TIMEOUT <seconds>``      ``HTTP_USERNAME <username>``      ``HTTP_PASSWORD <password>``      ``HTTP_HEADER <header1> [<header2>...]``      ``TLS_VERIFY <bool>``      ``TLS_CAINFO <file>``      ``NETRC <level>``      ``NETRC_FILE <file>``      ``GIT_REPOSITORY <url>``      ``GIT_TAG <tag>``      ``GIT_REMOTE_NAME <name>``      ``GIT_SUBMODULES <module>...``      ``GIT_SHALLOW <bool>``      ``GIT_PROGRESS <bool>``      ``GIT_CONFIG <option1> [<option2>...]``      ``SVN_REPOSITORY <url>``      ``SVN_REVISION -r<rev>``      ``SVN_USERNAME <username>``      ``SVN_PASSWORD <password>``      ``SVN_TRUST_CERT <bool>``      ``HG_REPOSITORY <url>``      ``HG_TAG <tag>``      ``CVS_REPOSITORY <cvsroot>``      ``CVS_MODULE <mod>``      ``CVS_TAG <tag>``    ``UPDATE_COMMAND <cmd>...``    ``UPDATE_DISCONNECTED <bool>``    ``PATCH_COMMAND <cmd>...``    ``CONFIGURE_COMMAND <cmd>...``    ``CMAKE_COMMAND /.../cmake``    ``CMAKE_GENERATOR <gen>``    ``CMAKE_GENERATOR_PLATFORM <platform>``    ``CMAKE_GENERATOR_TOOLSET <toolset>``    ``CMAKE_GENERATOR_INSTANCE <instance>``    ``CMAKE_ARGS <arg>...``    ``CMAKE_CACHE_ARGS <arg>...``    ``CMAKE_CACHE_DEFAULT_ARGS <arg>...``    ``SOURCE_SUBDIR <dir>``    ``BUILD_COMMAND <cmd>...``    ``BUILD_IN_SOURCE <bool>``    ``BUILD_ALWAYS <bool>``    ``BUILD_BYPRODUCTS <file>...``    ``INSTALL_COMMAND <cmd>...``    ``TEST_COMMAND <cmd>...``    ``TEST_BEFORE_INSTALL <bool>``    ``TEST_AFTER_INSTALL <bool>``    ``TEST_EXCLUDE_FROM_MAIN <bool>``    ``LOG_DOWNLOAD <bool>``    ``LOG_UPDATE <bool>``    ``LOG_PATCH <bool>``    ``LOG_CONFIGURE <bool>``    ``LOG_BUILD <bool>``    ``LOG_INSTALL <bool>``    ``LOG_TEST <bool>``    ``LOG_MERGED_STDOUTERR <bool>``    ``LOG_OUTPUT_ON_FAILURE <bool>``    ``USES_TERMINAL_DOWNLOAD <bool>``    ``USES_TERMINAL_UPDATE <bool>``    ``USES_TERMINAL_CONFIGURE <bool>``    ``USES_TERMINAL_BUILD <bool>``    ``USES_TERMINAL_INSTALL <bool>``    ``USES_TERMINAL_TEST <bool>``    ``DEPENDS <targets>...``    ``EXCLUDE_FROM_ALL <bool>``    ``STEP_TARGETS <step-target>...``    ``INDEPENDENT_STEP_TARGETS <step-target>...``    ``LIST_SEPARATOR <sep>``    ``COMMAND <cmd>...``.. command:: ExternalProject_Get_Property.. command:: ExternalProject_Add_Step  ``COMMAND <cmd>...``  ``COMMENT \"<text>...\"``  ``DEPENDEES <step>...``  ``DEPENDERS <step>...``  ``DEPENDS <file>...``  ``BYPRODUCTS <file>...``  ``ALWAYS <bool>``  ``EXCLUDE_FROM_MAIN <bool>``  ``WORKING_DIRECTORY <dir>``  ``LOG <bool>``  ``USES_TERMINAL <bool>``.. command:: ExternalProject_Add_StepTargets.. command:: ExternalProject_Add_StepDependencies")
set(link_libraries "-ljson-c-lafb-libhelpers-lsystemd")
set(option "-ljson-c-lafb-libhelpers-lsystemd")
set(pkg_count "1")
set(pkgcfg_lib_afb-libhelpers_afb-libhelpers "/usr/lib/x86_64-linux-gnu/libafb-libhelpers.a")
set(pkgcfg_lib_json-c_json-c "/usr/lib/x86_64-linux-gnu/libjson-c.so")
set(pkgcfg_lib_libsystemd_systemd "/usr/lib/x86_64-linux-gnu/libsystemd.so")
set(prefix_result "/lib/x86_64-linux-gnu")
set(project_cmakefiles "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/01-build_options.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/02-variables.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/03-macros.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/04-extra_targets.cmake")
set(system_cmakefiles "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/01-build_options.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/02-variables.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/03-macros.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/04-extra_targets.cmake")
set(type "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/01-build_options.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/02-variables.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/03-macros.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/04-extra_targets.cmake")
set(val "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/01-build_options.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/02-variables.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/03-macros.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/04-extra_targets.cmake")
set(var "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/01-build_options.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/02-variables.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/03-macros.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/04-extra_targets.cmake")
set(variable "/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/01-build_options.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/02-variables.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/03-macros.cmake/usr/share/cmake-3.16/Modules/CMakeAfbTemplates/cmake/cmake.d/04-extra_targets.cmake")
